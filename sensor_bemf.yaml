### back electromotive force (back EMF)
### https://en.wikipedia.org/wiki/Counter-electromotive_force


binary_sensor:
  - platform: template
    id: BEMF_1_sensor
    name: "BEMF CH1 sensor"
    lambda: return ((id(BEMF_1_2_sensor_ADC).state >= id(bemf_trigger_1).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH1_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH1_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH1 opening endstop reached at %f V", id(BEMF_1_2_sensor_ADC).state);
                    id(CH1_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH1_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH1_cover).make_call();
                    //call2.set_position(id(CH1_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH1 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH1_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH1_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH1 closing endstop reached at %f V", id(BEMF_1_2_sensor_ADC).state);
                    id(CH1_cover).position  = 0.0; //0.0 = 0% = CLOSED
                    id(CH1_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH1_cover).make_call();
                    //call2.set_position(id(CH1_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH1 +%f %% to remove strenght", id(rollback).state);
                }

  - platform: template
    id: BEMF_2_sensor
    name: "BEMF CH2 sensor"
    lambda: return ((id(BEMF_1_2_sensor_ADC).state >= id(bemf_trigger_2).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH2_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH2_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH2 opening endstop reached at %f V", id(BEMF_1_2_sensor_ADC).state);
                    id(CH2_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH2_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH2_cover).make_call();
                    //call2.set_position(id(CH2_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH2 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH2_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH2_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH2 closing endstop reached at %f V", id(BEMF_1_2_sensor_ADC).state);
                    id(CH2_cover).position  = 0.0;
                    id(CH2_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH2_cover).make_call();
                    //call2.set_position(id(CH2_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH2 +%f %% to remove strenght", id(rollback).state);
                }

  - platform: template
    id: BEMF_3_sensor
    name: "BEMF CH3 sensor"
    lambda: return ((id(BEMF_3_4_sensor_ADC).state >= id(bemf_trigger_3).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH3_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH3_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH3 opening endstop reached at %f V", id(BEMF_3_4_sensor_ADC).state);
                    id(CH3_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH3_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH3_cover).make_call();
                    //call2.set_position(id(CH3_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH3 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH3_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH3_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH3 closing endstop reached at %f V", id(BEMF_3_4_sensor_ADC).state);
                    id(CH3_cover).position  = 0.0;
                    id(CH3_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH3_cover).make_call();
                    //call2.set_position(id(CH3_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH3 +%f %% to remove strenght", id(rollback).state);
                }


  - platform: template
    id: BEMF_4_sensor
    name: "BEMF CH4 sensor"
    lambda: return ((id(BEMF_3_4_sensor_ADC).state >= id(bemf_trigger_4).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH4_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH4_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH4 opening endstop reached at %f V", id(BEMF_3_4_sensor_ADC).state);
                    id(CH4_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH4_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH4_cover).make_call();
                    //call2.set_position(id(CH4_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH4 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH4_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH4_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH4 closing endstop reached at %f V", id(BEMF_3_4_sensor_ADC).state);
                    id(CH4_cover).position  = 0.0;
                    id(CH4_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH4_cover).make_call();
                    //call2.set_position(id(CH4_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH4 +%f %% to remove strenght", id(rollback).state);
                }

  - platform: template
    id: BEMF_5_sensor
    name: "BEMF CH5 sensor"
    lambda: return ((id(BEMF_5_6_sensor_ADC).state >= id(bemf_trigger_5).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH5_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH5_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH5 opening endstop reached at %f V", id(BEMF_5_6_sensor_ADC).state);
                    id(CH5_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH5_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH5_cover).make_call();
                    //call2.set_position(id(CH5_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH5 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH5_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH5_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH5 closing endstop reached at %f V", id(BEMF_5_6_sensor_ADC).state);
                    id(CH5_cover).position  = 0.0;
                    id(CH5_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH5_cover).make_call();
                    //call2.set_position(id(CH5_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH5 +%f %% to remove strenght", id(rollback).state);
                }

  - platform: template
    id: BEMF_6_sensor
    name: "BEMF CH6 sensor"
    lambda: return ((id(BEMF_5_6_sensor_ADC).state >= id(bemf_trigger_6).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH6_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH6_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH6 opening endstop reached at %f V", id(BEMF_5_6_sensor_ADC).state);
                    id(CH6_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH6_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH6_cover).make_call();
                    //call2.set_position(id(CH6_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH6 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH6_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH6_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH6 closing endstop reached at %f V", id(BEMF_5_6_sensor_ADC).state);
                    id(CH6_cover).position  = 0.0;
                    id(CH6_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH6_cover).make_call();
                    //call2.set_position(id(CH6_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH6 +%f %% to remove strenght", id(rollback).state);
                }


  - platform: template
    id: BEMF_7_sensor
    name: "BEMF CH7 sensor"
    lambda: return ((id(BEMF_7_8_sensor_ADC).state >= id(bemf_trigger_7).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH7_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH7_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH7 opening endstop reached at %f V", id(BEMF_7_8_sensor_ADC).state);
                    id(CH7_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH7_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH7_cover).make_call();
                    //call2.set_position(id(CH7_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH7 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH7_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH7_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH7 closing endstop reached at %f V", id(BEMF_7_8_sensor_ADC).state);
                    id(CH7_cover).position  = 0.0;
                    id(CH7_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH7_cover).make_call();
                    //call2.set_position(id(CH7_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH7 +%f %% to remove strenght", id(rollback).state);
                }


  - platform: template
    id: BEMF_8_sensor
    name: "BEMF CH8 sensor"
    lambda: return ((id(BEMF_7_8_sensor_ADC).state >= id(bemf_trigger_8).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH8_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH8_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH8 opening endstop reached at %f V", id(BEMF_7_8_sensor_ADC).state);
                    id(CH8_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH8_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH8_cover).make_call();
                    //call2.set_position(id(CH8_cover).position -id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH8 -%f %% to remove strenght", id(rollback).state);
                } else if (id(CH8_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH8_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    ESP_LOGD("main", "CH8 closing endstop reached at %f V", id(BEMF_7_8_sensor_ADC).state);
                    id(CH8_cover).position  = 0.0;
                    id(CH8_cover).publish_state();
                    //Rollback
                    //auto call2 = id(CH8_cover).make_call();
                    //call2.set_position(id(CH8_cover).position +id(rollback).state/100);
                    //call2.perform();
                    //ESP_LOGD("main", "Rollback CH8 +%f %% to remove strenght", id(rollback).state);
                }
